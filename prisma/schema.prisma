// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "cockroachdb"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum ProviderName {
  GITHUB
}

enum PlaylistType {
  CUSTOM
  LIKED
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  PENDING
  EXPIRED
  TRIALING
  UNPAID
}

model User {
  id                 BigInt        @id @default(autoincrement())
  stripe_customer_id String?       @unique
  name               String?
  email              String        @unique
  password           String?
  imageUrl           String?
  providers          Provider[]
  playlists          Playlist[]    @relation(name: "playlists")
  subscription       Subscription?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
}

model Provider {
  id            BigInt       @id @default(autoincrement())
  name          ProviderName
  access_token  String       @unique
  refresh_token String?
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        BigInt
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Playlist {
  id           BigInt       @id @default(autoincrement())
  name         String
  imageUrl     String?
  songs        Song[]
  type         PlaylistType @default(CUSTOM)
  user         User         @relation(name: "playlists", fields: [userId], references: [id], onDelete: Cascade)
  userId       BigInt
  lastPlayedAt DateTime?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Song {
  id           BigInt    @id @default(autoincrement())
  name         String
  songUrl      String
  imageUrl     String?
  artist       String?
  album        String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  lastPlayedAt DateTime?
  playlist     Playlist  @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  playlistId   BigInt
}

model Subscription {
  id                     BigInt             @id @default(autoincrement())
  stripe_subscription_id String?            @unique
  status                 SubscriptionStatus @default(PENDING)
  current_period_start   DateTime?
  current_period_end     DateTime?
  cancel_at              DateTime?
  trial_start            DateTime?
  trial_end              DateTime?
  cancel_at_period_end   Boolean            @default(false)
  ended_at               DateTime?
  canceled_at            DateTime?
  createdAt              DateTime           @default(now())
  user                   User               @relation(fields: [userId], references: [id])
  userId                 BigInt             @unique
}
